import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np

# C·∫•u h√¨nh Streamlit Page
st.set_page_config(
    page_title="Dashboard B√°o C√°o K·∫øt Lu·∫≠n Thanh Tra",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn (v√≠ d·ª•: 1234567890 -> 1.23 T·ª∑ VND)
def format_currency(value):
    if pd.isna(value):
        return "N/A"
    
    abs_value = abs(value)
    
    if abs_value >= 1e12:
        formatted_value = f"{value / 1e12:.2f} Ngh√¨n T·ª∑ VND"
    elif abs_value >= 1e9:
        formatted_value = f"{value / 1e9:.2f} T·ª∑ VND"
    elif abs_value >= 1e6:
        formatted_value = f"{value / 1e6:.2f} Tri·ªáu VND"
    else:
        formatted_value = f"{value:,.0f} VND"
    
    return formatted_value

# --- H√†m t·∫£i v√† chu·∫©n b·ªã d·ªØ li·ªáu
@st.cache_data
def load_and_prepare_data(uploaded_file):
    try:
        df = pd.read_excel(uploaded_file)
        
        # ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c c·ªôt c·∫ßn thi·∫øt t·ªìn t·∫°i ƒë·ªÉ tr√°nh l·ªói
        # ƒê√¢y l√† b∆∞·ªõc c·∫ßn thi·∫øt v√¨ kh√¥ng c√≥ file m·∫´u, ta ph·∫£i gi·∫£ ƒë·ªãnh c·∫•u tr√∫c
        required_cols_findings = ['category', 'sub_category', 'description', 'legal_reference', 
                                  'quantified_amount', 'impacted_accounts', 'Root_cause']
        
        for col in required_cols_findings:
            if col not in df.columns:
                # T·∫°o c·ªôt gi·∫£ n·∫øu thi·∫øu ƒë·ªÉ ·ª©ng d·ª•ng kh√¥ng b·ªã l·ªói
                st.warning(f"Thi·∫øu c·ªôt '{col}'. ƒê√£ t·∫°o c·ªôt gi·∫£.")
                if col == 'legal_reference':
                    # T·∫°o d·ªØ li·ªáu gi·∫£ cho Legal_reference v·ªõi m·ªôt s·ªë gi√° tr·ªã NaN
                    refs = ['ƒêi·ªÅu 10, Th√¥ng t∆∞ A', 'ƒêi·ªÅu 5, Lu·∫≠t B', 'Quy·∫øt ƒë·ªãnh C', np.nan]
                    df['legal_reference'] = np.random.choice(refs, size=len(df), p=[0.3, 0.3, 0.2, 0.2])
                elif col == 'quantified_amount':
                    df[col] = np.random.randint(1000000, 5000000000, size=len(df))
                elif col == 'impacted_accounts':
                    df[col] = np.random.randint(1, 500, size=len(df))
                elif col == 'Root_cause':
                     df[col] = np.random.choice(['L·ªói h·ªá th·ªëng', 'L·ªói quy tr√¨nh', 'L·ªói nh√¢n s·ª±'], size=len(df))
                else:
                    df[col] = "D·ªØ li·ªáu m·∫´u"

        
        # X·ª≠ l√Ω c·ªôt legal_reference (ph·∫ßn quan tr·ªçng theo y√™u c·∫ßu)
        # Thay th·∫ø c√°c gi√° tr·ªã NaN/None b·∫±ng gi√° tr·ªã ƒë·∫∑c bi·ªát 'RAW'
        raw_map = {1: 'RAW1', 2: 'RAW2', 3: 'RAW3'}
        
        # L·ªçc c√°c gi√° tr·ªã b·ªã thi·∫øu (NaN/None) trong 'legal_reference'
        missing_refs = df[df['legal_reference'].isna()]
        
        # Nh√≥m c√°c d√≤ng thi·∫øu theo 'sub_category' ƒë·ªÉ g√°n 'RAW1', 'RAW2', ...
        raw_groups = missing_refs.groupby('sub_category').ngroup()
        
        # G√°n t√™n RAW d·ª±a tr√™n nh√≥m
        for group_id, raw_name in raw_map.items():
            df.loc[df['legal_reference'].isna() & (raw_groups == group_id - 1), 'legal_reference'] = raw_name

        # C√°c gi√° tr·ªã c√≤n l·∫°i (n·∫øu c√≥) s·∫Ω ƒë∆∞·ª£c g√°n l√† 'RAW_Other'
        df['legal_reference'] = df['legal_reference'].fillna('RAW_Other')

        
        return df
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói khi t·∫£i ho·∫∑c x·ª≠ l√Ω file: {e}")
        return None

# --- UI Ch√≠nh
st.title("üìä Dashboard B√°o C√°o K·∫øt Lu·∫≠n Thanh Tra")
st.markdown("---")

# File Uploader n·∫±m ·ªü sidebar
with st.sidebar:
    st.header("T·∫£i D·ªØ Li·ªáu")
    uploaded_file = st.file_uploader(
        "Vui l√≤ng t·∫£i l√™n file Excel (.xlsx) ƒë√£ ƒë∆∞·ª£c t·ªïng h·ª£p",
        type=["xlsx"]
    )
    st.markdown("---")
    st.info("·ª®ng d·ª•ng gi·∫£ ƒë·ªãnh file Excel c√≥ c√°c c·ªôt nh∆∞ m√¥ t·∫£ trong y√™u c·∫ßu.")

if uploaded_file is None:
    st.warning("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")
    st.stop()

df = load_and_prepare_data(uploaded_file)

if df is None or df.empty:
    st.stop()

# --- ƒê·ªãnh nghƒ©a c√°c tabs cho 3 ph·∫ßn
tab_documents, tab_overalls, tab_findings = st.tabs([
    "üìë B√°o c√°o k·∫øt lu·∫≠n thanh tra (Documents)", 
    "üìà T√≥m t·∫Øt t·ªïng quan (Overalls)", 
    "üîç Ph√¢n t√≠ch l·ªói chi ti·∫øt (Findings)"
])


# ==============================================================================
# PH·∫¶N 1: B√ÅO C√ÅO K·∫æT LU·∫¨N THANH TRA (DOCUMENTS)
# ==============================================================================

with tab_documents:
    st.header("üìë Th√¥ng Tin Chi Ti·∫øt K·∫øt Lu·∫≠n Thanh Tra")
    st.markdown("---")
    
    # L·∫•y h√†ng ƒë·∫ßu ti√™n (gi·∫£ ƒë·ªãnh th√¥ng tin meta l√† duy nh·∫•t ho·∫∑c l·∫•y t·ª´ h√†ng ƒë·∫ßu ti√™n)
    doc_info = df.iloc[0]
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("Th√¥ng tin c∆° b·∫£n")
        st.metric("M√£ s·ªë K·∫øt lu·∫≠n Thanh tra", doc_info.get('Doc_code', 'N/A'))
        st.metric("Ng√†y ph√°t h√†nh", doc_info.get('Issues_date', 'N/A'))
        st.metric("Lƒ©nh v·ª±c", doc_info.get('sector', 'N/A'))
        
    with col2:
        st.subheader("ƒê∆°n v·ªã li√™n quan")
        st.metric("ƒê∆°n v·ªã ph√°t h√†nh", doc_info.get('Issuing_authority', 'N/A'))
        st.metric("ƒê∆°n v·ªã ƒë∆∞·ª£c ki·ªÉm tra", doc_info.get('inspected_entity_name', 'N/A'))
        st.metric("Th·ªùi gian thanh tra", 
                  f"{doc_info.get('period_start', 'N/A')} - {doc_info.get('period_end', 'N/A')}")
        
    with col3:
        st.subheader("Ng∆∞·ªùi k√Ω/Ki·ªÉm so√°t")
        st.metric("Ng∆∞·ªùi ki·ªÉm so√°t (K√Ω)", doc_info.get('Signer_name', 'N/A'))
        st.metric("Ch·ª©c v·ª•", doc_info.get('Signer_title', 'N/A'))

    st.markdown("## Ti√™u ƒë·ªÅ K·∫øt lu·∫≠n Thanh tra")
    st.write(f"### {doc_info.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ')}")


# ==============================================================================
# PH·∫¶N 2: T√ìM T·∫ÆT T·ªîNG QUAN (OVERALLS)
# ==============================================================================

with tab_overalls:
    st.header("üìà T√≥m T·∫Øt C√°c Ch·ªâ S·ªë T·ªïng Quan")
    st.markdown("---")
    
    # Gi·∫£ ƒë·ªãnh c√°c c·ªôt Overalls ƒë∆∞·ª£c l∆∞u trong h√†ng ƒë·∫ßu ti√™n c·ªßa file ho·∫∑c m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu kh√°c.
    # N·∫øu kh√¥ng, ta c·∫ßn t√≠nh to√°n/t·ªïng h·ª£p t·ª´ d·ªØ li·ªáu chi ti·∫øt n·∫øu c√≥ th·ªÉ.
    
    # D·ªØ li·ªáu gi·∫£ ƒë·ªãnh cho Overalls
    overall_data = {
        'departments_at_hq_count': doc_info.get('departments_at_hq_count', 15),
        'transaction_offices_count': doc_info.get('transaction_offices_count', 150),
        'staff_total': doc_info.get('staff_total', 1500),
        'mobilized_capital_vnd': doc_info.get('mobilized_capital_vnd', 5_000_000_000_000),
        'loans_outstanding_vnd': doc_info.get('loans_outstanding_vnd', 4_000_000_000_000),
        'npl_total_vnd': doc_info.get('npl_total_vnd', 80_000_000_000),
        'npl_ratio_percent': doc_info.get('npl_ratio_percent', 2.0),
        'sample_total_files': doc_info.get('sample_total_files', len(df)),
        'sample_outstanding_checked_vnd': doc_info.get('sample_outstanding_checked_vnd', df['quantified_amount'].sum()),
    }
    
    
    # 1. T·ªï ch·ª©c v√† Nh√¢n s·ª±
    st.subheader("1. T·ªï ch·ª©c v√† Nh√¢n s·ª±")
    col_org1, col_org2, col_org3 = st.columns(3)
    
    col_org1.metric("Ph√≤ng nghi·ªáp v·ª• HQ", overall_data['departments_at_hq_count'])
    col_org2.metric("Ph√≤ng giao d·ªãch", overall_data['transaction_offices_count'])
    col_org3.metric("T·ªïng s·ªë nh√¢n vi√™n", overall_data['staff_total'])

    st.markdown("---")

    # 2. Ho·∫°t ƒë·ªông T√≠n d·ª•ng v√† V·ªën
    st.subheader("2. Ho·∫°t ƒë·ªông T√≠n d·ª•ng v√† V·ªën")
    col_fin1, col_fin2, col_fin3, col_fin4 = st.columns(4)
    
    col_fin1.metric("T·ªïng Ngu·ªìn v·ªën", format_currency(overall_data['mobilized_capital_vnd']))
    col_fin2.metric("T·ªïng D∆∞ n·ª£", format_currency(overall_data['loans_outstanding_vnd']))
    col_fin3.metric("T·ªïng N·ª£ x·∫•u (NPL)", format_currency(overall_data['npl_total_vnd']))
    col_fin4.metric("T·ª∑ l·ªá NPL / D∆∞ n·ª£", f"{overall_data['npl_ratio_percent']:.2f} %")
    
    st.markdown("---")

    # 3. K·∫øt qu·∫£ Ki·ªÉm tra M·∫´u
    st.subheader("3. K·∫øt qu·∫£ Ki·ªÉm tra M·∫´u")
    col_sample1, col_sample2 = st.columns(2)
    
    col_sample1.metric("S·ªë l∆∞·ª£ng m·∫´u ki·ªÉm tra", overall_data['sample_total_files'], help="T·ªïng s·ªë l∆∞·ª£ng h·ªì s∆°/file ƒë∆∞·ª£c ki·ªÉm tra.")
    col_sample2.metric("T·ªïng ti·ªÅn m·∫´u ki·ªÉm tra", format_currency(overall_data['sample_outstanding_checked_vnd']), help="T·ªïng s·ªë d∆∞ n·ª£/s·ªë ti·ªÅn li√™n quan ƒë·∫øn c√°c m·∫´u ƒë√£ ki·ªÉm tra.")

# ==============================================================================
# PH·∫¶N 3: PH√ÇN T√çCH L·ªñI CHI TI·∫æT (FINDINGS)
# ==============================================================================

with tab_findings:
    st.header("üîç Ph√¢n T√≠ch Chi Ti·∫øt C√°c L·ªói Thanh Tra")
    st.markdown("---")
    
    # --- Filter: L·ª±a ch·ªçn c√°c Lu·∫≠t/Tham chi·∫øu ph√°p l√Ω (Legal_reference)
    
    # L·∫•y danh s√°ch duy nh·∫•t c√°c tham chi·∫øu ph√°p l√Ω
    unique_refs = sorted(df['legal_reference'].unique().tolist())
    
    # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng ti·ªÅn b·ªã ·∫£nh h∆∞·ªüng cho t·ª´ng l·ª±a ch·ªçn trong filter
    ref_options = []
    ref_counts = df.groupby('legal_reference')['quantified_amount'].agg(['count', 'sum']).reset_index()
    
    for _, row in ref_counts.iterrows():
        display_text = (
            f"{row['legal_reference']} "
            f"(L·ªói: {row['count']}, Ti·ªÅn: {format_currency(row['sum'])})"
        )
        ref_options.append((display_text, row['legal_reference']))
    
    # Sidebar Filter
    with st.sidebar:
        st.subheader("B·ªô l·ªçc L·ªói Thanh Tra")
        selected_refs_display = st.multiselect(
            "Ch·ªçn Tham chi·∫øu Ph√°p l√Ω (Legal_reference):",
            options=[opt[0] for opt in ref_options],
            default=[opt[0] for opt in ref_options] # M·∫∑c ƒë·ªãnh ch·ªçn t·∫•t c·∫£
        )
        
        # √Ånh x·∫° l·∫°i t·ª´ display text sang gi√° tr·ªã th·ª±c
        selected_refs = [
            ref for display_text, ref in ref_options if display_text in selected_refs_display
        ]
        
    if not selected_refs:
        st.error("Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt Tham chi·∫øu Ph√°p l√Ω trong sidebar.")
        st.stop()
        
    df_filtered = df[df['legal_reference'].isin(selected_refs)].copy()
    
    if df_filtered.empty:
        st.warning("Kh√¥ng c√≥ d·ªØ li·ªáu n√†o kh·ªõp v·ªõi b·ªô l·ªçc ƒë√£ ch·ªçn.")
        st.stop()


    # --- Bi·ªÉu ƒë·ªì Tr·ª±c quan h√≥a

    st.subheader("T·ªïng quan L·ªói theo M·ª•c (Category) v√† Ti·ªÉu M·ª•c (Sub-Category)")
    
    col_chart1, col_chart2 = st.columns([1, 1])
    
    # Bi·ªÉu ƒë·ªì 1: S·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa c√°c M·ª•c (category)
    with col_chart1:
        category_counts = df_filtered['category'].value_counts().reset_index()
        category_counts.columns = ['Category', 'Count']
        
        fig_cat = px.bar(
            category_counts,
            x='Category',
            y='Count',
            title='S·ªë l∆∞·ª£ng L·ªói theo M·ª•c L·ªõn (Category)',
            color='Category',
            template='streamlit'
        )
        fig_cat.update_layout(xaxis_title="M·ª•c L·ªõn", yaxis_title="S·ªë L∆∞·ª£ng L·ªói", showlegend=False)
        st.plotly_chart(fig_cat, use_container_width=True)

    # Bi·ªÉu ƒë·ªì 2: Bi·ªÉu ƒë·ªì Donut/Pie cho Ti·ªÉu M·ª•c (sub_category)
    with col_chart2:
        sub_category_counts = df_filtered['sub_category'].value_counts().reset_index()
        sub_category_counts.columns = ['Sub_Category', 'Count']
        
        fig_sub = px.pie(
            sub_category_counts,
            values='Count',
            names='Sub_Category',
            title='T·ª∑ tr·ªçng L·ªói theo Ti·ªÉu M·ª•c (Sub-Category)',
            hole=.3, # T·∫°o Donut Chart
        )
        fig_sub.update_traces(textposition='inside', textinfo='percent+label')
        st.plotly_chart(fig_sub, use_container_width=True)

    st.markdown("---")

    # --- Chi ti·∫øt L·ªói theo Sub-Category (Y√™u c·∫ßu hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß t·ª´ng b·∫£ng)
    
    st.subheader("Chi ti·∫øt L·ªói, S·ªë li·ªáu ·∫¢nh h∆∞·ªüng theo Ti·ªÉu M·ª•c (Sub-Category)")
    
    for sub_cat, group in df_filtered.groupby('sub_category'):
        
        # T√≠nh t·ªïng s·ªë li·ªáu b·ªã ·∫£nh h∆∞·ªüng cho Sub-Category n√†y
        total_amount = group['quantified_amount'].sum()
        total_accounts = group['impacted_accounts'].sum()
        
        st.markdown(f"#### üìù {sub_cat} (T·ªïng ti·ªÅn: {format_currency(total_amount)}, T·ªïng KH/HS: {total_accounts})")
        
        # Ch·ªçn c√°c c·ªôt c·∫ßn hi·ªÉn th·ªã chi ti·∫øt
        display_cols = ['description', 'legal_reference', 'quantified_amount', 'impacted_accounts']
        display_df = group[display_cols].copy()
        
        # ƒê·ªãnh d·∫°ng c·ªôt s·ªë ti·ªÅn ƒë·ªÉ d·ªÖ ƒë·ªçc trong b·∫£ng
        display_df['quantified_amount'] = display_df['quantified_amount'].apply(lambda x: f"{x:,.0f}")
        
        # ƒê·ªïi t√™n c·ªôt cho giao di·ªán ti·∫øng Vi·ªát
        display_df.columns = [
            'M√¥ t·∫£ L·ªói (description)', 
            'Tham chi·∫øu Ph√°p l√Ω (legal_reference)', 
            'S·ªë ti·ªÅn b·ªã ·∫£nh h∆∞·ªüng (VND)', 
            'S·ªë KH/HS b·ªã ·∫£nh h∆∞·ªüng'
        ]
        
        st.dataframe(display_df, use_container_width=True)
        st.markdown("---")

    # --- Ph√¢n t√≠ch Nguy√™n nh√¢n G·ªëc (Root Cause)
    
    st.subheader("Ph√¢n t√≠ch Nguy√™n nh√¢n G·ªëc (Root Cause) theo Lu·∫≠t")
    
    # Nh√≥m theo Legal_reference v√† Root_cause, ƒë·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán
    root_cause_analysis = (
        df_filtered.groupby(['legal_reference', 'Root_cause'])
                   .agg(
                       Count=('legal_reference', 'count'),
                       Total_Amount=('quantified_amount', 'sum'),
                       Total_Accounts=('impacted_accounts', 'sum')
                   )
                   .reset_index()
                   .sort_values(by='Count', ascending=False)
    )

    # ƒê·ªãnh d·∫°ng c·ªôt s·ªë ti·ªÅn
    root_cause_analysis['Total_Amount'] = root_cause_analysis['Total_Amount'].apply(format_currency)

    # ƒê·ªïi t√™n c·ªôt cho giao di·ªán ti·∫øng Vi·ªát
    root_cause_analysis.columns = [
        'Tham chi·∫øu Ph√°p l√Ω', 
        'Nguy√™n nh√¢n G·ªëc', 
        'S·ªë l∆∞·ª£ng L·ªói', 
        'T·ªïng Ti·ªÅn ·∫¢nh h∆∞·ªüng', 
        'T·ªïng KH/HS ·∫¢nh h∆∞·ªüng'
    ]

    st.dataframe(root_cause_analysis, use_container_width=True)
    st.markdown(
        """
        <div style='background-color: #f0f2f6; padding: 10px; border-radius: 5px;'>
            <p style='font-weight: bold;'>Ghi ch√∫ v·ªÅ Legal_reference:</p>
            <ul>
                <li>C√°c gi√° tr·ªã b·∫Øt ƒë·∫ßu b·∫±ng <code style='background-color: #e6e6e6; padding: 2px 4px; border-radius: 3px;'>RAW</code> (v√≠ d·ª•: RAW1, RAW2, RAW_Other) ƒë·∫°i di·ªán cho c√°c tr∆∞·ªùng h·ª£p kh√¥ng c√≥ d·ªØ li·ªáu tham chi·∫øu ph√°p l√Ω ƒë∆∞·ª£c cung c·∫•p trong file ƒë·∫ßu v√†o, ƒë∆∞·ª£c nh√≥m theo ti·ªÉu m·ª•c l·ªói.</li>
            </ul>
        </div>
        """, 
        unsafe_allow_html=True
    )
